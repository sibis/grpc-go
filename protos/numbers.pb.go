// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.7.1
// source: numbers.proto

package numbers

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type NumberRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number int32 `protobuf:"varint,1,opt,name=Number,proto3" json:"Number,omitempty"`
}

func (x *NumberRequest) Reset() {
	*x = NumberRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_numbers_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NumberRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NumberRequest) ProtoMessage() {}

func (x *NumberRequest) ProtoReflect() protoreflect.Message {
	mi := &file_numbers_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NumberRequest.ProtoReflect.Descriptor instead.
func (*NumberRequest) Descriptor() ([]byte, []int) {
	return file_numbers_proto_rawDescGZIP(), []int{0}
}

func (x *NumberRequest) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

type NumberResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number int32 `protobuf:"varint,1,opt,name=Number,proto3" json:"Number,omitempty"`
}

func (x *NumberResponse) Reset() {
	*x = NumberResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_numbers_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NumberResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NumberResponse) ProtoMessage() {}

func (x *NumberResponse) ProtoReflect() protoreflect.Message {
	mi := &file_numbers_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NumberResponse.ProtoReflect.Descriptor instead.
func (*NumberResponse) Descriptor() ([]byte, []int) {
	return file_numbers_proto_rawDescGZIP(), []int{1}
}

func (x *NumberResponse) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

var File_numbers_proto protoreflect.FileDescriptor

var file_numbers_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x27, 0x0a, 0x0d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x28, 0x0a, 0x0e, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x32, 0xdb, 0x01, 0x0a, 0x06, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x32, 0x0a,
	0x0b, 0x46, 0x69, 0x6e, 0x64, 0x42, 0x69, 0x67, 0x67, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x2e, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30,
	0x01, 0x12, 0x34, 0x0a, 0x10, 0x46, 0x69, 0x6e, 0x64, 0x42, 0x69, 0x67, 0x67, 0x65, 0x73, 0x74,
	0x4e, 0x75, 0x6d, 0x43, 0x53, 0x12, 0x0e, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x28, 0x01, 0x12, 0x34, 0x0a, 0x10, 0x46, 0x69, 0x6e, 0x64, 0x42,
	0x69, 0x67, 0x67, 0x65, 0x73, 0x74, 0x4e, 0x75, 0x6d, 0x53, 0x53, 0x12, 0x0e, 0x2e, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x30, 0x01, 0x12, 0x31, 0x0a,
	0x0e, 0x46, 0x69, 0x6e, 0x64, 0x42, 0x69, 0x67, 0x67, 0x65, 0x73, 0x74, 0x4e, 0x75, 0x6d, 0x12,
	0x0e, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0f, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_numbers_proto_rawDescOnce sync.Once
	file_numbers_proto_rawDescData = file_numbers_proto_rawDesc
)

func file_numbers_proto_rawDescGZIP() []byte {
	file_numbers_proto_rawDescOnce.Do(func() {
		file_numbers_proto_rawDescData = protoimpl.X.CompressGZIP(file_numbers_proto_rawDescData)
	})
	return file_numbers_proto_rawDescData
}

var file_numbers_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_numbers_proto_goTypes = []interface{}{
	(*NumberRequest)(nil),  // 0: NumberRequest
	(*NumberResponse)(nil), // 1: NumberResponse
}
var file_numbers_proto_depIdxs = []int32{
	0, // 0: Number.FindBiggest:input_type -> NumberRequest
	0, // 1: Number.FindBiggestNumCS:input_type -> NumberRequest
	0, // 2: Number.FindBiggestNumSS:input_type -> NumberRequest
	0, // 3: Number.FindBiggestNum:input_type -> NumberRequest
	1, // 4: Number.FindBiggest:output_type -> NumberResponse
	0, // 5: Number.FindBiggestNumCS:output_type -> NumberRequest
	0, // 6: Number.FindBiggestNumSS:output_type -> NumberRequest
	1, // 7: Number.FindBiggestNum:output_type -> NumberResponse
	4, // [4:8] is the sub-list for method output_type
	0, // [0:4] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_numbers_proto_init() }
func file_numbers_proto_init() {
	if File_numbers_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_numbers_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NumberRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_numbers_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NumberResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_numbers_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_numbers_proto_goTypes,
		DependencyIndexes: file_numbers_proto_depIdxs,
		MessageInfos:      file_numbers_proto_msgTypes,
	}.Build()
	File_numbers_proto = out.File
	file_numbers_proto_rawDesc = nil
	file_numbers_proto_goTypes = nil
	file_numbers_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// NumberClient is the client API for Number service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NumberClient interface {
	FindBiggest(ctx context.Context, opts ...grpc.CallOption) (Number_FindBiggestClient, error)
	FindBiggestNumCS(ctx context.Context, opts ...grpc.CallOption) (Number_FindBiggestNumCSClient, error)
	FindBiggestNumSS(ctx context.Context, in *NumberRequest, opts ...grpc.CallOption) (Number_FindBiggestNumSSClient, error)
	FindBiggestNum(ctx context.Context, in *NumberRequest, opts ...grpc.CallOption) (*NumberResponse, error)
}

type numberClient struct {
	cc grpc.ClientConnInterface
}

func NewNumberClient(cc grpc.ClientConnInterface) NumberClient {
	return &numberClient{cc}
}

func (c *numberClient) FindBiggest(ctx context.Context, opts ...grpc.CallOption) (Number_FindBiggestClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Number_serviceDesc.Streams[0], "/Number/FindBiggest", opts...)
	if err != nil {
		return nil, err
	}
	x := &numberFindBiggestClient{stream}
	return x, nil
}

type Number_FindBiggestClient interface {
	Send(*NumberRequest) error
	Recv() (*NumberResponse, error)
	grpc.ClientStream
}

type numberFindBiggestClient struct {
	grpc.ClientStream
}

func (x *numberFindBiggestClient) Send(m *NumberRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *numberFindBiggestClient) Recv() (*NumberResponse, error) {
	m := new(NumberResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *numberClient) FindBiggestNumCS(ctx context.Context, opts ...grpc.CallOption) (Number_FindBiggestNumCSClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Number_serviceDesc.Streams[1], "/Number/FindBiggestNumCS", opts...)
	if err != nil {
		return nil, err
	}
	x := &numberFindBiggestNumCSClient{stream}
	return x, nil
}

type Number_FindBiggestNumCSClient interface {
	Send(*NumberRequest) error
	CloseAndRecv() (*NumberRequest, error)
	grpc.ClientStream
}

type numberFindBiggestNumCSClient struct {
	grpc.ClientStream
}

func (x *numberFindBiggestNumCSClient) Send(m *NumberRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *numberFindBiggestNumCSClient) CloseAndRecv() (*NumberRequest, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(NumberRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *numberClient) FindBiggestNumSS(ctx context.Context, in *NumberRequest, opts ...grpc.CallOption) (Number_FindBiggestNumSSClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Number_serviceDesc.Streams[2], "/Number/FindBiggestNumSS", opts...)
	if err != nil {
		return nil, err
	}
	x := &numberFindBiggestNumSSClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Number_FindBiggestNumSSClient interface {
	Recv() (*NumberRequest, error)
	grpc.ClientStream
}

type numberFindBiggestNumSSClient struct {
	grpc.ClientStream
}

func (x *numberFindBiggestNumSSClient) Recv() (*NumberRequest, error) {
	m := new(NumberRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *numberClient) FindBiggestNum(ctx context.Context, in *NumberRequest, opts ...grpc.CallOption) (*NumberResponse, error) {
	out := new(NumberResponse)
	err := c.cc.Invoke(ctx, "/Number/FindBiggestNum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NumberServer is the server API for Number service.
type NumberServer interface {
	FindBiggest(Number_FindBiggestServer) error
	FindBiggestNumCS(Number_FindBiggestNumCSServer) error
	FindBiggestNumSS(*NumberRequest, Number_FindBiggestNumSSServer) error
	FindBiggestNum(context.Context, *NumberRequest) (*NumberResponse, error)
}

// UnimplementedNumberServer can be embedded to have forward compatible implementations.
type UnimplementedNumberServer struct {
}

func (*UnimplementedNumberServer) FindBiggest(Number_FindBiggestServer) error {
	return status.Errorf(codes.Unimplemented, "method FindBiggest not implemented")
}
func (*UnimplementedNumberServer) FindBiggestNumCS(Number_FindBiggestNumCSServer) error {
	return status.Errorf(codes.Unimplemented, "method FindBiggestNumCS not implemented")
}
func (*UnimplementedNumberServer) FindBiggestNumSS(*NumberRequest, Number_FindBiggestNumSSServer) error {
	return status.Errorf(codes.Unimplemented, "method FindBiggestNumSS not implemented")
}
func (*UnimplementedNumberServer) FindBiggestNum(context.Context, *NumberRequest) (*NumberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindBiggestNum not implemented")
}

func RegisterNumberServer(s *grpc.Server, srv NumberServer) {
	s.RegisterService(&_Number_serviceDesc, srv)
}

func _Number_FindBiggest_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NumberServer).FindBiggest(&numberFindBiggestServer{stream})
}

type Number_FindBiggestServer interface {
	Send(*NumberResponse) error
	Recv() (*NumberRequest, error)
	grpc.ServerStream
}

type numberFindBiggestServer struct {
	grpc.ServerStream
}

func (x *numberFindBiggestServer) Send(m *NumberResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *numberFindBiggestServer) Recv() (*NumberRequest, error) {
	m := new(NumberRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Number_FindBiggestNumCS_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NumberServer).FindBiggestNumCS(&numberFindBiggestNumCSServer{stream})
}

type Number_FindBiggestNumCSServer interface {
	SendAndClose(*NumberRequest) error
	Recv() (*NumberRequest, error)
	grpc.ServerStream
}

type numberFindBiggestNumCSServer struct {
	grpc.ServerStream
}

func (x *numberFindBiggestNumCSServer) SendAndClose(m *NumberRequest) error {
	return x.ServerStream.SendMsg(m)
}

func (x *numberFindBiggestNumCSServer) Recv() (*NumberRequest, error) {
	m := new(NumberRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Number_FindBiggestNumSS_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NumberRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NumberServer).FindBiggestNumSS(m, &numberFindBiggestNumSSServer{stream})
}

type Number_FindBiggestNumSSServer interface {
	Send(*NumberRequest) error
	grpc.ServerStream
}

type numberFindBiggestNumSSServer struct {
	grpc.ServerStream
}

func (x *numberFindBiggestNumSSServer) Send(m *NumberRequest) error {
	return x.ServerStream.SendMsg(m)
}

func _Number_FindBiggestNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NumberServer).FindBiggestNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Number/FindBiggestNum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NumberServer).FindBiggestNum(ctx, req.(*NumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Number_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Number",
	HandlerType: (*NumberServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindBiggestNum",
			Handler:    _Number_FindBiggestNum_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FindBiggest",
			Handler:       _Number_FindBiggest_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "FindBiggestNumCS",
			Handler:       _Number_FindBiggestNumCS_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "FindBiggestNumSS",
			Handler:       _Number_FindBiggestNumSS_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "numbers.proto",
}
